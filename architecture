-Classes: obvio
-Encapsulamento (ver como fazer depois)
-Construtores padrao facil;
-Espaço de nomes: nao sei ainda
-Herança: ok
-Polimorfismo parametrico: nao tem
-Polimorfismo por sobrecarga (usar construtores alternativos)
-Lambda: var adder = function (x) {
    return function (y) {
        return x + y;
    };
};
add5 = adder(5);
add5(1) == 6

-Currying: uma conta qualquer
-Recursao: iterar sobre uma lista qualquer
-Delegate: onClick()
-Pattern Matching: verificar nome de usuario com regex
__________________________________
Nao sei:
-Como usar alta ordem?
-Uso de listas para manipular estruturas, elementos em funçao de ordem maior
__________________________________________________________________
-Definiçao e uso de classes: ok -Construtores: ok -Namespaces: ok -Herança: ok -Polimorfismo parametrico: ok -Construtores alternativos: diferentes tipos de objetos em object ou match default / parametros definidos ok


-Encapsulamento: nao tem
-Funcoes como primeira ordem: ok michel -pattern matching: ok michel -Funcoes ordem maior / uso de listas: ok michel

-funçoes lambda: ?na propria atribuiçao de funçoes das classes ok 
-currying: ?

-recursao: pensar em algo
-uso de delegates: pensar em algo

----------------------------------
Funçao de ordem maior: filter para verificar colisoes